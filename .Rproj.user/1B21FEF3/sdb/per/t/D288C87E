{
    "contents" : "#based on https://www.kaggle.com/c/titanic-gettingStarted\n#https://github.com/codebender/kaggle-titanic-r\n#VARIABLE DESCRIPTIONS:\n#  survival        Survival\n#(0 = No; 1 = Yes)\n#pclass          Passenger Class\n#(1 = 1st; 2 = 2nd; 3 = 3rd)\n#name            Name\n#sex             Sex\n#age             Age\n#sibsp           Number of Siblings/Spouses Aboard\n#parch           Number of Parents/Children Aboard\n#ticket          Ticket Number\n#fare            Passenger Fare\n#cabin           Cabin\n#embarked        Port of Embarkation\n#(C = Cherbourg; Q = Queenstown; S = Southampton)\n#\n#SPECIAL NOTES:\n#  Pclass is a proxy for socio-economic status (SES)\n#1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower\n#\n#Age is in Years; Fractional if Age less than One (1)\n#If the Age is Estimated, it is in the form xx.5\n#\n#With respect to the family relation variables (i.e. sibsp and parch)\n#some relations were ignored.  The following are the definitions used\n#for sibsp and parch.\n#\n#Sibling:  Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic\n#Spouse:   Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)\n#Parent:   Mother or Father of Passenger Aboard Titanic\n#Child:    Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic#\n\n#Other family relatives excluded from this study include cousins,\n#nephews/nieces, aunts/uncles, and in-laws.  Some children travelled\n#only with a nanny, therefore parch=0 for them.  As well, some\n#travelled with very close friends or neighbors in a village, however,\n#the definitions do not support such relations.\n\n# SETUP: INSTAL REQUIRED PACKAGES ############################################\n#install.packages('rattle', 'rpart.plot')\n#install.packages('RColorBrewer')\n#install.packages('rattle')\n#install.packages('rpart.plot')\n#install.packages('RColorBrewer')\n#install.packages('randomForest')\n#install.packages('party')\n#install.packages('Amelia')\n\n#SETUP: LOAD LIBRARIES #########################################################\n#library(Amelia)\n#library(rattle)\n#library(rpart.plot)\n#library(RColorBrewer)\n#library(rpart)\n\n#missmap(test, main=\"Titanic Training Data - Missings Map\", \n#        col=c(\"yellow\", \"black\"), legend=FALSE)\n\n# SETUP: LOAD DATA #############################################################\nsetwd(\"G:/challenges/titanic/\")\n\ntrain <- read.csv(\"train.csv\", stringsAsFactors=FALSE)\ntest <- read.csv(\"test.csv\", stringsAsFactors=FALSE)\n# SETUP: FUNCTIONS #############################################################\n## function for extracting honorific (i.e. title) from the Name feature\ngetTitle <- function(data) {\n  title.dot.start <- regexpr(\"\\\\,[A-Z ]{1,20}\\\\.\", data$Name, TRUE)\n  title.comma.end <- title.dot.start + attr(title.dot.start, \"match.length\") - 1\n  data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)\n  return (data$Title)\n}   \n\n# HANDLING DATA ################################################################\n# normalizing train and test data (adding a column Survived to test)\ntest$Survived <- 0\n\n# create a full data.table\nfull <- rbind(train, test)\nfull$Name <- as.character(full$Name)\n\n# get (an normalize) the peope titles\nfull$Title <- getTitle(full)\nfull$Title[full$Title %in% c('Mme', 'Mlle')] <- 'Mlle'\nfull$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'\nfull$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\n\n# title is a factor, a categorized data\nfull$Title <- factor(full$Title)\n\nfull$FamilySize <- full$SibSp + full$Parch + 1\n\nfull$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})\nfull$FamilyID <- paste(as.character(full$FamilySize), full$Surname, sep=\"\")\nfull$FamilyID[full$FamilySize <= 2] <- 'Small'\n\nfamIDs <- data.frame(table(full$FamilyID))\nfamIDs <- famIDs[famIDs$Freq <= 2,]\nfull$FamilyID[full$FamilyID %in% famIDs$Var1] <- 'Small'\nfull$FamilyID <- factor(full$FamilyID)\nlibrary(rpart)\n\nAgefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,\n                data=full[!is.na(full$Age),], method=\"anova\")\n\nfull$Age[is.na(full$Age)] <- predict(Agefit, full[is.na(full$Age),])\n\nfare.mod<- lm(Fare ~ Pclass + Sex + SibSp + Parch + Age, data = full)\nfull$Fare[is.na(test$Fare)] <- predict(fare.mod, full)[is.na(full$Fare)]\n\n\n#clean_train <- full[1:891,]\n#clean_test <- full[892:1309,]\n#fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=clean_train, method=\"class\")\nlibrary(randomForest)\n\nfullna <- full\nsubset(fullna, FamilySize == NA)\nfit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=200)\n#summary(fit)\n\n#Prediction <- predict(fit, clean_test, type = \"class\")\n#submit <- data.frame(PassengerId = clean_test$PassengerId, Survived = Prediction)\n#write.csv(submit, file = \"engineered_features_tree.csv\", row.names = FALSE)",
    "created" : 1427838028632.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1757869587",
    "id" : "D288C87E",
    "lastKnownWriteTime" : 1427846452,
    "path" : "G:/challenges/titanic/titanic.R",
    "project_path" : "titanic.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
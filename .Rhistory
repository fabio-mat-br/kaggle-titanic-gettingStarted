setwd("G:/challenges/titanic/")
train <- read.csv("train.csv")
str(train)
plot(train$Age)
summary(train$Age)
train$Child <- 0
train$Child[train$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data=train, FUN=sum)
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, train, type = "class")
Prediction
library(rpart)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
setwd("G:/challenges/titanic/")
train <- read.csv("train.csv")
str(train)
plot(train$Age)
summary(train$Age)
train$Child <- 0
train$Child[train$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data=train, FUN=sum)
aggregate(Survived ~ Child + Sex, data=train, FUN=length)
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, train, type = "class")
Prediction
# Generate submission data
fancyRpartPlot(fit)
install.packages('rpart.plot')
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
install.packages('randomForest')
install.packages('party')
train <- read.csv("train.csv", stringsAsFactors=FALSE)
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
test$Survived <- NA
full <- rbind(train, test)
View(full)
full$Name <- as.character(full$Name)
setwd("G:/challenges/titanic/")
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
test$Survived <- NA
full <- rbind(train, test)
full$Name <- as.character(full$Name)
full$Name <- as.character(full$Name)
full$Name <- as.character(full$Name)
full <- rbind(train, test)
full$Name <- as.character(full$Name)
full$Title <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
View(full)
full$Title <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
full$Title <- sub(' ', '', full$Title)
full$Title <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
full$Title <- sub(' ', '', full$Title)
full$Title[full$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
full$Title <- factor(full$Title)
View(full)
full$Title <- factor(full$Title)
full$FamilySize <- full$SibSp + full$Parch + 1
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$FamilyID <- paste(as.character(full$FamilySize), full$Surname, sep="")
full$FamilyID[full$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(full$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
full$FamilyID[full$FamilyID %in% famIDs$Var1] <- 'Small'
full$FamilyID <- factor(full$FamilyID)
View(full)
clean_train <- full[1:891,]
clean_test <- full[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=clean_train, method="class")
plot(fit)
summary(fit)
Prediction <- predict(fit, clean_test, type = "class")
submit <- data.frame(PassengerId = clean_test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Output/engineered_features_tree.csv", row.names = FALSE)
write.csv(submit, file = "engineered_features_tree.csv", row.names = FALSE)
require(Amelia)
install.packages('Amelia')
require(Amelia)
missmap(train, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
missmap(test, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
getTitle
install.packages('rattle', 'rpart.plot')
library(Amelia)
missmap(test, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
?rbind
# normalizing train and test data (adding a column Survived to test)
test$Survived <- NA
## function for extracting honorific (i.e. title) from the Name feature
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start
+ attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
full <- rbind(train, test)
full$Name <- getTitle(full$Name)
full$Title <- sapply(full$Name, getTitle)
full$Title <- sapply(full$Name, getTitle())
full$Title <- sapply(full$Name, getTitle(x))
full$Title <- sapply(full$Name, function (x) {getTitle(x)})
full$Title <- getTitle(full)
unique(full$Title)
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start
+ attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
full$Title <- getTitle(full)
full$Name <- as.character(full$Name)
#get (an normalize) the peope titles
full$Title <- getTitle(full)
unique(full$Title)
getTitle(full[1])
getTitle(full$[1])
getTitle(full[,1])
getTitle(full[1,])
getTitle <- function(data) {
debugger
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start
+ attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
getTitle(full[1,])
getTitle(full[1,])
debug(getTitle(full[1,]))
debugger(getTitle(full[1,]))
debug(getTitle(full[1,]))
getTitle(full[1,])
debug(getTitle)
getTitle(full[1,])
data
regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)[1]
regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)[2]
getTitle <- function(data) {
debugger
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)[1]
title.comma.end <- title.dot.start
+ attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
getTitle(full[1,])
getTitle <- function(data) {
debugger
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start
+ attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
debug(getTitle)
getTitle(full[1,])
attr
?attr
title.dot.start
attr(title.dot.start, "match.length")
attr(title.dot.start, "match.length")-1
title.comma.end <- title.dot.start
getTitle <- function(data) {
debugger
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length") - 1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
debug(getTitle)
getTitle(full[1,])
data$Title
full$Title <- getTitle(full)
function(data) {
debugger
debugger
debugger
debugger
debugger
debugger
debugger
debugger
cccccccccccccc
ccq
q
q
q
q
q
q
q
q
qqqqqqq
q
q
q
q
q
q
q
q
q
q
q
q
q
q
q
quit
kill()
end
}
}
}
setwd("G:/challenges/titanic/")
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
# SETUP: FUNCTIONS #############################################################
## function for extracting honorific (i.e. title) from the Name feature
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length") - 1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
# HANDLING DATA ################################################################
# normalizing train and test data (adding a column Survived to test)
test$Survived <- NA
# create a full data.table
full <- rbind(train, test)
full$Name <- as.character(full$Name)
#get (an normalize) the peope titles
full$Title <- getTitle(full)
unique(full$Title)
full$Title[full$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
full$Title <- factor(full$Title)
full$Title <- factor(full$Title)
unique(full$Age)
sort(unique(full$Age))
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$FamilySize <- full$SibSp + full$Parch + 1
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$FamilySize <- full$SibSp + full$Parch + 1
full$FamilySize <- full$SibSp + full$Parch + 1
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$FamilyID <- paste(as.character(full$FamilySize), full$Surname, sep="")
famIDs <- data.frame(table(full$FamilyID))
View(famIDs)
full$FamilyID[full$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(full$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
full$FamilyID[full$FamilyID %in% famIDs$Var1] <- 'Small'
full$FamilyID <- factor(full$FamilyID)
full$Pclass
plot(full$Pclass, full$Survived)
barplot(full$Pclass, full$Survived)
unique(full$FamilySize)
full$FamilySize == 11
full[full$FamilySize == 11]
full$[full$FamilySize == 11]
full[full$FamilySize == 11]
full$FamilySize == 11
subset(full, FamilySize > 10)
subset(full, FamilySize > 10)
dim(subset(full, FamilySize > 10))
dim(subset(full, FamilySize > 10))
subset(full, FamilySize > 10)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=clean_train, method="class")
library(RandomForest)
library(randomForest)
randomForest
?randomForest
as.factor(full$Survived)
fit(as.factor(full$Survived) ~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = full)
fit <- randomForest(as.factor(full$Survived) ~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = full)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = full)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data =train)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full)
test$Survived <- 0
# create a full data.table
full <- rbind(train, test)
full$Name <- as.character(full$Name)
# get (an normalize) the peope titles
full$Title <- getTitle(full)
full$Title[full$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
# title is a factor, a categorized data
full$Title <- factor(full$Title)
full$FamilySize <- full$SibSp + full$Parch + 1
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$FamilyID <- paste(as.character(full$FamilySize), full$Surname, sep="")
full$FamilyID[full$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(full$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
full$FamilyID[full$FamilyID %in% famIDs$Var1] <- 'Small'
full$FamilyID <- factor(full$FamilyID)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=train)
setwd("G:/challenges/titanic/")
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
# SETUP: FUNCTIONS #############################################################
## function for extracting honorific (i.e. title) from the Name feature
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length") - 1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
# HANDLING DATA ################################################################
# normalizing train and test data (adding a column Survived to test)
test$Survived <- 0
# create a full data.table
full <- rbind(train, test)
full$Name <- as.character(full$Name)
# get (an normalize) the peope titles
full$Title <- getTitle(full)
full$Title[full$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
# title is a factor, a categorized data
full$Title <- factor(full$Title)
full$FamilySize <- full$SibSp + full$Parch + 1
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$FamilyID <- paste(as.character(full$FamilySize), full$Surname, sep="")
full$FamilyID[full$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(full$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
full$FamilyID[full$FamilyID %in% famIDs$Var1] <- 'Small'
full$FamilyID <- factor(full$FamilyID)
#clean_train <- full[1:891,]
#clean_test <- full[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=clean_train, method="class")
library(randomForest)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full)
unique(full$Survived)
(is.null(full$Survived))
is.null(full$Survived)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full, FamilyID2, data=train, importance=TRUE, ntree=2000)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full, importance=TRUE, ntree=2000)
full$Survived
rfImpute(full)
train
dim(train)
trainM = full[1:891,]
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=trainM, importance=TRUE, ntree=2000)
fit <- rfImpute(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=trainM, importance=TRUE, ntree=2000)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=trainM, importance=TRUE, ntree=2000)
trainM$Survived
trainM$Pclass
trainM$Age
summary(trainM$Age)
summary(full$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=full[!is.na(full$Age),], method="anova")
full$Age[is.na(full$Age)] <- predict(Agefit, full[is.na(full$Age),])
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=full[!is.na(full$Age),], method="anova")
full$Age[is.na(full$Age)] <- predict(Agefit, full[is.na(full$Age),])
full$Age[is.na(full$Age)] <- predict(Agefit, full[is.na(full$Age),])
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=trainM, importance=TRUE, ntree=2000)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full, importance=TRUE, ntree=2000)
?rpart
full$Age
full$SibSp
full$Parch
full$Fare
full$Embarked
full$Title
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=full, importance=TRUE, ntree=2000)
is.na(full)
is.na(full$Age)
is.na(full$Age) != FALSE
na.omit(full)
fullna <- na.omit(full)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=200)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare, data=fullna, importance=TRUE, ntree=200)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age, data=fullna, importance=TRUE, ntree=200)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age, data=fullna, ntree=200)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=200)
fullna <- full
fullna <- full
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=200)
fullna$Survived
is.na(fullna$Survived)
is.na(fullna$Pclass)
is.na(fullna$Sex)
is.na(fullna$Age)
is.na(fullna$SibSp)
is.na(fullna$Parch)
is.na(fullna$Fare)
fare.mod<- lm(fare ~ pclass + sex +
sibsp + parch + age, data = full)
fare.mod<- lm(Fare ~ Pclass + Sex + SibSp + Parch + Age, data = full)
fare.mod<- lm(Fare ~ Pclass + Sex + SibSp + Parch + Age, data = full)
full$fare[is.na(test$fare)] <- predict(fare.mod, full)[is.na(full$fare)]
full$fare[is.na(test$Fare)] <- predict(fare.mod, full)[is.na(full$Fare)]
full$Fare[is.na(test$Fare)] <- predict(fare.mod, full)[is.na(full$Fare)]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=fullna, importance=TRUE, ntree=200)
is.na(fullna$Embarked)
is.na(fullna$Title)
fullna[fullna$Pclass]
fullna[fullna$Pclass == 1]
subset(fullna, Pclass ==2)
subset(fullna, Pclass ==NA)
subset(fullna, Survived == NA)
subset(fullna, Sex == NA)
subset(fullna, Age == NA)
subset(fullna, SibSp == NA)
subset(fullna, Parch == NA)
subset(fullna, Fare == NA)
subset(fullna, Embarked == NA)
subset(fullna, Title == NA)
subset(fullna, Family == NA)
subset(fullna, FamilySize == NA)
